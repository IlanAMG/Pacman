import React, { useEffect } from 'react'

export const Map = React.memo( ({ debut, setPosIntersections, setPosSuperPoints,setPosWalls, setPosPoints, setPosTeleport }) => {
    const map = [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],
        [1, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 4, 1, 1, 1, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1],
        [1, 4, 2, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 2, 4, 1],
        [1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 7, 5, 0, 5, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 5, 0, 5, 7, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 7, 4, 1, 1, 1, 4, 0, 5, 0, 5, 0, 5, 0, 4, 1, 1, 1, 4, 0, 5, 0, 5, 0, 5, 0, 4, 1, 1, 1, 4, 7, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 4, 1],
        [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 5, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 5, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 0, 4, 1, 1, 1, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 1, 1, 1, 4, 0, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 0, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 0, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 8, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 8, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6],
        [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 0, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 0, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 0, 4, 1, 1, 1, 4, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 4, 1, 1, 1, 4, 0, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 0, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 0, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],
        [1, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 4, 1, 1, 1, 4, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 2, 5, 0, 5, 0, 4, 1, 1, 1, 4, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 5, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 4, 1, 1, 1, 4, 0, 5, 0, 5, 2, 4, 1],
        [1, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 1],
        [1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1],
        [1, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 1],
        [1, 4, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 4, 1, 1, 1, 4, 0, 5, 0, 5, 0, 5, 0, 4, 1, 1, 1, 4, 0, 5, 0, 5, 0, 5, 0, 4, 1, 1, 1, 4, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1, 1, 1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1, 1, 1, 4, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 4, 1],
        [1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1, 1, 1, 4, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 4, 1],
        [1, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 1],
        [1, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 7, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 4, 1],
        [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]

    let top = 0;
    let left = 0;

    const getCoordonate = () => {
        let X = 0;
        let Y = 0;
        const superPoints = []
        const points = []
        const walls = [{ x: 0, y: 0 }]
        const intersections = []
        const teleport = []

        for (let i = 0; i < map.length - 1; i++) {
            if (i > 0) {
                Y += 10
                X = 0
            }
            for (let j = 0; j < map[j].length - 1; j++) {
                if (j > 0) {
                    X += 10
                    if (map[i][j] === 0) {
                        points.push({ x: X, y: Y })
                    }

                    if (map[i][j] === 4) {
                        walls.push({ x: X, y: Y })
                    }

                    if (map[i][j] === 6) {
                        teleport.push({ x: X, y: Y })
                    }

                    if (map[i][j] === 2) {
                        superPoints.push({ x: X, y: Y })
                    }
                    if (map[i][j] === 7) {
                        intersections.push({ x: X, y: Y })
                        points.push({ x: X, y: Y })
                    }
                    if (map[i][j] === 8) {
                        intersections.push({ x: X, y: Y })
                    }
                }
            }
        }
        setPosPoints(points)
        setPosSuperPoints(superPoints)
        setPosWalls(walls)
        setPosTeleport(teleport)
        setPosIntersections(intersections)
    }

    useEffect(() => {
        debut && 
        getCoordonate()
    }, [debut])
    
    return (
        <>
            {
                map.map((rows, key) => {
                    if (key > 0) {
                        top += 10;
                        left = 0;
                    }
                    return (

                        rows.map((location, key) => {
                            if (key > 0) {
                                left += 10;
                            }

                            if (location === 1) {

                                return (
                                    <div className='wall' style={{ top: `${top}px`, left: `${left}px` }}></div>
                                )
                            }
                           
                            if (location === 3) {
                                return (
                                    <div className='wrapper-door' style={{ top: `${top}px`, left: `${left}px` }}>
                                        <div className='door'></div>
                                    </div>
                                )
                            }
                            if (location === 4) {
                                return (
                                    <div className='vide' style={{ top: `${top}px`, left: `${left}px` }}>

                                    </div>
                                )
                            }
                            if (location === 6) {
                                return (
                                    <div className='vide' style={{ top: `${top}px`, left: `${left}px` }}>

                                    </div>
                                )
                            }
                        })
                    )
                })

            }
        </>
    )
})
